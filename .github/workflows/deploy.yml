name: Deploy to Google Cloud VM

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  VM_HOST: ${{ secrets.VM_HOST }}
  VM_USER: ${{ secrets.VM_USER }}
  VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
  APP_NAME: namedrop
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          NODE_ENV: production

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: namedrop:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            NODE_ENV=production

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VM
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting deployment of ${{ env.APP_NAME }}..."
          
          # Navigate to app directory
          cd /opt/${{ env.APP_NAME }} || {
            echo "❌ App directory not found. Creating it..."
            sudo mkdir -p /opt/${{ env.APP_NAME }}
            sudo chown ${{ env.VM_USER }}:${{ env.VM_USER }} /opt/${{ env.APP_NAME }}
            cd /opt/${{ env.APP_NAME }}
          }
          
          # Pull latest code
          echo "📥 Pulling latest code..."
          git fetch origin
          git reset --hard origin/main
          
          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          docker-compose down || true
          
          # Build and start new containers
          echo "🚀 Building and starting new containers..."
          docker-compose up -d --build
          
          # Clean up old images
          echo "🧹 Cleaning up old images..."
          docker image prune -f
          
          # Health check
          echo "🏥 Performing health check..."
          sleep 30
          if curl -f http://localhost:3001/api/health; then
            echo "✅ Deployment successful! App is healthy."
          else
            echo "❌ Health check failed. Rolling back..."
            docker-compose down
            exit 1
          fi
          
          echo "🎉 Deployment completed successfully!"
          EOF
          
          # Make script executable and run it
          chmod +x deploy.sh
          scp deploy.sh ${{ env.VM_USER }}@${{ env.VM_HOST }}:/tmp/
          ssh ${{ env.VM_USER }}@${{ env.VM_HOST }} "sudo mv /tmp/deploy.sh /opt/${{ env.APP_NAME }}/ && cd /opt/${{ env.APP_NAME }} && ./deploy.sh"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
